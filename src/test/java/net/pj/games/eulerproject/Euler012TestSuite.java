package net.pj.games.eulerproject;

import java.math.BigInteger;
import java.util.List;
import net.pj.games.eulerproject.elements.BigIntegerPrimeComponent;
import org.junit.Ignore;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <H1>Highly divisible triangular number</H1>
 * <H2>Problem 12</H2>
 * <p>
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * <br/>
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <br/>
 * Let us list the factors of the first seven triangle numbers:
 * <br/>
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 * <br>
 * We can see that 28 is the first triangle number to have over five divisors.
 * <br/>
 * What is the value of the first triangle number to have over five hundred 
 * divisors?
 * </p>
 * 
 * @author dauvertpj
 */
public class Euler012TestSuite {

	private static final Logger log = LoggerFactory.getLogger(Euler012TestSuite.class);

	@Test
        @Ignore
	public void testTrianglesPrimeMatrix() {

		log.info("----  Test for problem 12  ----");

		int deep = 100;
		List<BigInteger> primeList = Prime.getPrimesLowerThan(new BigInteger(String.valueOf(deep)));

		// print header
		StringBuilder renderer = new StringBuilder();
		renderer.append("\nN°\t");
		renderer.append(String.format("%1$-8s", "Val"));
		renderer.append("Div\t");
		for (BigInteger prime : primeList) {
			renderer.append(prime).append("\t");
		}
		renderer.append("\n");
                // print each triangles from 2 to "deep"
		for (int t = 2; t < deep; t++) {
			BigInteger triangle = EulerCalculator.calculateTriangleOfSize(t);
			List<BigIntegerPrimeComponent> primecomposition = Prime.getPrimeNumbersCompositionOf(triangle);
			int count = Prime.countDividersOf(triangle);
			StringBuilder triangleRenderer = new StringBuilder();
			triangleRenderer.append(t).append("\t");
			
			triangleRenderer.append(String.format("%1$-8s", triangle));
			triangleRenderer.append(count).append("\t");
			for (BigInteger prime : primeList) {
				boolean found = false;
				for (BigIntegerPrimeComponent composant : primecomposition) {
					if (composant.getPrime().compareTo(prime) == 0) {
						triangleRenderer.append(composant.getPower()).append("\t");
						found = true;
						break;
					}
				}
				if(!found)triangleRenderer.append("-\t");
				
			}
			triangleRenderer.append("\n");
			renderer.append(triangleRenderer);
		}
		log.info(renderer.toString());
	}

        @Test
	public void solution() {
            
            log.info("----  Solution of problem 12  ----");
            int init=12345;
            int maxDividers = 500;
            int dividers = 0;
            BigInteger triangle = EulerCalculator.calculateTriangleOfSize(init);
            while(dividers < maxDividers){
                init += 1;
                triangle = EulerCalculator.calculateTriangleOfSize(init);
                dividers = Prime.countDividersOf(triangle);
            }
            log.info("Triangle N°:{} - Value : {}", init, triangle.toString());
            List<BigInteger> dividersList = Prime.getDividersOf(triangle);
            log.info("{} Diviseurs : {}", dividers, dividersList);
            
        }

}
